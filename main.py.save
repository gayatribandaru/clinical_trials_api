from fastapi import FastAPI, HTTPExceptionfrom pydantic import BaseModelfrom typing import List# Initialize appapp = FastAPI()# Dummy database (in-memory)clinical_trials = {}# Data modelclass Trial(BaseModel):    id: int    title: str    description: str    status: str  # example: 'Ongoing', 'Completed'# Routes# Create a trial@app.post("/trials/", response_model=Trial)def create_trial(trial: Trial):    if trial.id in clinical_trials:        raise HTTPException(status_code=400, detail="Trial ID already exists.")    clinical_trials[trial.id] = trial    return trial# Read all trials@app.get("/trials/", response_model=List[Trial])def get_all_trials():    return list(clinical_trials.values())# Read single trial@app.get("/trials/{trial_id}", response_model=Trial)def get_trial(trial_id: int):    if trial_id not in clinical_trials:        raise HTTPException(status_code=404, detail="Trial not found.")    return clinical_trials[trial_id]# Update a trial@app.put("/trials/{trial_id}", response_model=Trial)def update_trial(trial_id: int, updated_trial: Trial):    if trial_id not in clinical_trials:        raise HTTPException(status_code=404, detail="Trial not found.")    clinical_trials[trial_id] = updated_trial    return updated_trial# Delete a trial@app.delete("/trials/{trial_id}")def delete_trial(trial_id: int):    if trial_id not in clinical_trials:        raise HTTPException(status_code=404, detail="Trial not found.")    del clinical_trials[trial_id]    return {"detail": "Trial deleted successfully."}
